import pygame
import random
import math
import time

pygame.init()

width, height = 800, 600
win = pygame.display.set_mode((width, height))
pygame.display.set_caption("Advanced Brick Breaker")

FPS = 60
paddle_width = 100
paddle_height = 15
ball_radius = 10
lives_font = pygame.font.SysFont("Abadi", 40)

game_over_img = pygame.image.load("C:/Users/adria/Downloads/Nelson_Ha-Ha.png")
game_over_img = pygame.transform.scale(game_over_img, (400, 200))

class Paddle:
    vel = 5

    def __init__(self, x, y, width, height, color):
        self.x, self.y, self.width, self.height, self.color = x, y, width, height, color

    def draw(self, win):
        pygame.draw.rect(win, self.color, (self.x, self.y, self.width, self.height))

    def move(self, direction=1):
        self.x += 5 * direction

class Ball:
    vel = 5

    def __init__(self, x, y, radius, color): 
        self.x, self.y, self.radius, self.color = x, y, radius, color
        self.x_vel, self.y_vel = 0, -5

    def move(self):
        self.x += self.x_vel
        self.y += self.y_vel

    def set_vel(self, x_vel, y_vel): 
        self.x_vel, self.y_vel = x_vel, y_vel

    def draw(self, win): 
        pygame.draw.circle(win, self.color, (self.x, self.y), self.radius)

class Brick:
    def __init__(self, x, y, width, height, health, colors, reset_time=2):
        self.x, self.y, self.width, self.height, self.health = x, y, width, height, health
        self.colors = colors
        self.color = colors[0]
        self.last_hit_time = time.time()
        self.reset_time = reset_time
        self.original_color = colors[0]

    def draw(self, win):
        pygame.draw.rect(win, self.color, (self.x, self.y, self.width, self.height))

    def collide(self, ball):
        if not (ball.x <= self.x + self.width and ball.x >= self.x):
            return False
        if not (ball.y - ball.radius <= self.y + self.height):
            return False

        self.health -= 1
        if self.health <= 0:
            return True

        self.last_hit_time = time.time()
        self.color = self.interpolate(self.colors[0], self.colors[1], self.health / 2)
        ball.set_vel(ball.x_vel, ball.y_vel * -1)
        return False

    def update(self):
        if time.time() - self.last_hit_time >= self.reset_time:
            self.color = self.original_color

    def interpolate(self, color_a, color_b, t):
        return tuple(int(a + (b - a) * t) for a, b in zip(color_a, color_b))

def draw(win, paddle, ball, bricks, lives):
    win.fill("gray")
    paddle.draw(win)
    ball.draw(win)
    for brick in bricks:
        brick.draw(win)
        brick.update()

    lives_text = lives_font.render(f"Lives: {lives}", True, "black")
    win.blit(lives_text, (10, height - lives_text.get_height() - 10))
    pygame.display.update()

def ball_collision(ball):
    if ball.x - ball_radius <= 0 or ball.x + ball_radius >= width:
        ball.set_vel(ball.x_vel * -1, ball.y_vel)
    if ball.y - ball_radius <= 0:
        ball.set_vel(ball.x_vel, ball.y_vel * -1)

def ball_paddle_collision(ball, paddle):
    if not (ball.x <= paddle.x + paddle.width and ball.x >= paddle.x):
        return
    if not (ball.y + ball.radius >= paddle.y):
        return

    paddle_center = paddle.x + paddle.width / 2
    distance_to_center = ball.x - paddle_center

    percent_width = distance_to_center / paddle.width
    angle = percent_width * 90
    angle_radians = math.radians(angle)

    x_vel = math.sin(angle_radians) * Ball.vel
    y_vel = math.cos(angle_radians) * Ball.vel * -1

    Ball.vel *= 1.05
    if Ball.vel > 15:
        Ball.vel = 15

    ball.set_vel(x_vel, y_vel)

def generate_bricks(rows, cols):
    gap = 2
    brick_width = width // cols - gap
    brick_height = 20
    bricks = []
    for row in range(rows):
        for col in range(cols):
            brick = Brick(col * brick_width + gap * col, row * brick_height + gap * row, brick_width, brick_height, 2, [(0, 255, 0), (255, 0, 0)])
            bricks.append(brick)
    return bricks

def main():
    clock = pygame.time.Clock()

    paddle_x = width / 2 - paddle_width / 2
    paddle_y = height - paddle_height - 5
    paddle = Paddle(paddle_x, paddle_y, paddle_width, paddle_height, "black")
    ball = Ball(paddle_x, paddle_y - ball_radius, ball_radius, "white")

    bricks = generate_bricks(3, 10)
    lives = 3

    def reset():
        paddle.x = paddle_x
        paddle.y = paddle_y
        ball.x = width / 2
        ball.y = paddle_y - ball_radius
        ball.set_vel(0, ball.vel * -1)

    def display_text(text):
        text_render = lives_font.render(text, True, "red")
        win.blit(text_render, (width / 2 - text_render.get_width() / 2, height / 2 - text_render.get_height() / 2))
        pygame.display.update()
        pygame.time.delay(3000)

    run = True
    while run:
        clock.tick(FPS)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
                break

        keys = pygame.key.get_pressed()

        if keys[pygame.K_LEFT] and paddle.x - paddle.vel >= 0:
            paddle.move(-1)
        if keys[pygame.K_RIGHT] and paddle.x + paddle_width + paddle.vel <= width:
            paddle.move(1)

        ball.move()
        ball_collision(ball)
        ball_paddle_collision(ball, paddle)

        for brick in bricks[:]:
            if brick.collide(ball):
                bricks.remove(brick)

        if ball.y + ball.radius >= height:
            lives -= 1
            ball.x = paddle.x + paddle.width / 2
            ball.y = paddle.y - ball_radius
            ball.set_vel(0, ball.vel * -1)

        if lives <= 0:
            bricks = generate_bricks(3, 10)
            lives = random.randint(1,6)
            reset()
            win.blit(game_over_img, (width / 2 - game_over_img.get_width() / 2, height / 2 - game_over_img.get_height() / 2))
            pygame.display.update()
            pygame.time.delay(3000)

        if len(bricks) == 0:
            bricks = generate_bricks(3, 10)
            lives = 3
            reset()
            display_text("You Won!")

        draw(win, paddle, ball, bricks, lives)

    pygame.quit()
    quit()

main()
